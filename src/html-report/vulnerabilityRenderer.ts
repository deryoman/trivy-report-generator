import {TrivyResult, Vulnerability} from "../types";
import {escapeHTML, renderRevisitationDate, renderSeverity, showLink, urlLabel} from "./html-utils";

export function renderVulnerabilities(result: TrivyResult) {
  if (result.Vulnerabilities.length == 0) {
    return "<!-- No Vulnerabilities -->"
  } else {
    return `
            <tr class="sub-header">
              <th>Package</th>
              <th>Vulnerability ID</th>
              <th>Severity</th>
              <th>Fixed Version</th>
              <th>Links</th>
            </tr>
            ${result.Vulnerabilities.map(renderVulnerabilityRow).join('')}
  `
  }
}

function renderVulnerabilityRow(vulnerability: Vulnerability) {
  return `
              <tr class="severity-${vulnerability.Severity} ${vulnerability.IgnoreReason ? 'multirow-first' : ''}">
                <td class="pkg-name">
                  ${escapeHTML(vulnerability.PkgName)} (${escapeHTML(vulnerability.InstalledVersion)})
                  ${vulnerability.PkgPath ? `<br><small>/${vulnerability.PkgPath}</small>` : ''}
                </td>
                <td>${escapeHTML(vulnerability.VulnerabilityID)}</td>
                <td class="severity">
                  ${renderSeverity(vulnerability)}
                  ${renderRevisitationDate(vulnerability)}
                </td>
                <td>${escapeHTML(vulnerability.FixedVersion)}</td>
                <td class="links">
                  ${(vulnerability['References'] || []).filter(reference => showLink(reference)).map(reference => `
                    <a target="_blank" href="${reference}">${urlLabel(reference)}</a>
                  `).join('')}
                </td>
              </tr>
              ${vulnerability.IgnoreReason ? `
              <tr class="severity-${vulnerability.Severity} multirow-last">
                <td colspan="5" class="ignore-reason">
                  ${escapeHTML(vulnerability.IgnoreReason)}
                </td>
              </tr>
              ` : ''}
            `;
}